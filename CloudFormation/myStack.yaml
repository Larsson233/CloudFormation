---
AWSTemplateFormatVersion : "2010-09-09"

Description: >
  My
  first
  template.

Resources:

  MyStartUpSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "MyStartUpSecGrp"
      GroupDescription: "Start up Sec Grp"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  MyLBSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "MyLBSecGrp"
      GroupDescription: "Load balancer Sec Grp"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyTempSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "MyTempSecGrp"
      GroupDescription: "Template sec grp"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt MyLBSecGrp.GroupId

  MyEFSSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "MyEFSSecGrp"
      GroupDescription: "EFS sec grp"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt MyTempSecGrp.GroupId
        - IpProtocol: "tcp"
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt MyStartUpSecGrp.GroupId

  MyDatabaseSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "MyDatabaseSecGrp"
      GroupDescription: "Database sec grp"
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !GetAtt MyTempSecGrp.GroupId
      - IpProtocol: "tcp"
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !GetAtt MyStartUpSecGrp.GroupId

  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn:
    - MyDBInstance
    - MyEfsFileSystem
    Properties:
      InstanceType: t2.micro
      ImageId: ami-04f1014c8adcfa670
      KeyName: AwsDemoKey
      SecurityGroupIds: 
      - !GetAtt MyStartUpSecGrp.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          dnf update -y
          dnf install -y wget
          dnf install -y httpd
          dnf install -y php-mysqlnd php-fpm php-mysqli php-json php php-devel php-gd
          dnf install -y amazon-efs-utils
          dnf install -y mariadb105-server
          systemctl start httpd
          systemctl enable httpd
          chown -R apache /var/www
          chgrp -R apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0644 {} \;
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          mount -t efs -o tls ${MyEfsFileSystem.FileSystemId}:/ /var/www/html
          cp -r wordpress/* /var/www/html/
          wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -O /tmp/wp-cli.phar
          chmod +x /tmp/wp-cli.phar 
          /tmp/wp-cli.phar config create --dbname=MyWPDatabase --dbuser=Admin --dbpass=Password --path=/var/www/html --dbhost=${MyDBInstance.Endpoint.Address}
          /tmp/wp-cli.phar core install --url=${MyLoadBalancer.DNSName} --title=Kingkong --admin_user=Admin --admin_password=Password --admin_email=info@example.com --path=/var/www/html

  MyLaunchTemplate:
      Type: 'AWS::EC2::LaunchTemplate'
      Properties:
        LaunchTemplateName: "FormationTemplate"
        LaunchTemplateData: 
          NetworkInterfaces:
            - DeviceIndex: 0
              AssociatePublicIpAddress: true
              Groups:
                - !GetAtt MyTempSecGrp.GroupId
              DeleteOnTermination: true
          ImageId: ami-04f1014c8adcfa670
          InstanceType: t2.micro
          KeyName: AwsDemoKey
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash -ex
              dnf update -y
              dnf install -y wget
              dnf install -y httpd
              dnf install -y php-mysqlnd php-fpm php-mysqli php-json php php-devel php-gd
              dnf install -y amazon-efs-utils
              systemctl start httpd
              systemctl enable httpd
              mount -t efs -o tls ${MyEfsFileSystem.FileSystemId}:/ /var/www/html
              
             
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: vpc-0e0102b7d2a6442bb
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health-check
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: "MyLB"
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt MyLBSecGrp.GroupId
      SubnetMappings: 
        - SubnetId: subnet-0eb075e9f84c19e8d
        - SubnetId: subnet-0373ffc28a383518f
        - SubnetId: subnet-03bfaf7e959364fbf

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - MyEC2Instance
    Properties:
      AutoScalingGroupName: MyAutoScalingGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref MyTargetGroup
      VPCZoneIdentifier:
          - subnet-0eb075e9f84c19e8d
          - subnet-0373ffc28a383518f
          - subnet-03bfaf7e959364fbf

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: mydbsubnetgroup
      DBSubnetGroupDescription: "My DB subnet group"
      SubnetIds:
        - subnet-0eb075e9f84c19e8d
        - subnet-0373ffc28a383518f
        - subnet-03bfaf7e959364fbf

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: MyDBInstance
      DBInstanceClass: db.t2.micro
      Engine: mariadb
      EngineVersion: "10.6.10"
      MasterUsername: Admin
      MasterUserPassword: Password
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      DBName: MyWPDatabase
      VPCSecurityGroups:
        - !GetAtt MyDatabaseSecGrp.GroupId  

  MyEfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: MyEfsFileSystem
      ThroughputMode: bursting
      BackupPolicy:
        Status: ENABLED

  MyEfsMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MyEfsFileSystem
      SubnetId: subnet-0eb075e9f84c19e8d
      SecurityGroups:
        - !GetAtt MyEFSSecGrp.GroupId

  MyEfsMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MyEfsFileSystem
      SubnetId: subnet-0373ffc28a383518f
      SecurityGroups:
        - !GetAtt MyEFSSecGrp.GroupId

  MyEfsMountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MyEfsFileSystem
      SubnetId: subnet-03bfaf7e959364fbf
      SecurityGroups:
        - !GetAtt MyEFSSecGrp.GroupId